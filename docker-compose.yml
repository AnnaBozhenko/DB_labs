version: '3.8'
services:
    app:
        build: ./app/
    depends_on:
        - db
    volumes:
        - './app/data:/app/data'
        - './app/program_output:/app/program_output'
        - './app/flyway/sql:/app/flyway/sql'
    networks:
         - test
    db:
        image: postgres:13
        restart: always
        environment:
            - POSTGRES_USER=Student
            - POSTGRES_PASSWORD=qwerty
            - POSTGRES_DB=ZNO
        ports:
            - '5432:5432'
        networks:
            - test
    flyway:
        image: flyway/flyway:7
        depends_on:
            - db
        command: -configFiles=/flyway/conf/flyway.conf migrate
        volumes:
            - './app/flyway/conf:/flyway/conf'
            - './app/flyway/sql:/flyway/sql'
    result_app:
        build:
            context: ./result_app
            dockerfile: Dockerfile
        volumes:
            - '../app/program_output:/program_output'
        depends_on:
            - db
        networks:
            - test

#networks:
#  test:

services:
    db:
        image: postgres:13
        restart: always
        environment:
            - POSTGRES_DB=ZNO
            - POSTGRES_USER=Student
            - POSTGRES_PASSWORD=qwerty
        ports:
            - 5432:5432/tcp
        command: -c max_wal_size=5GB
        networks:
            - test
    db_client:
        image: dpage/pgadmin4
        restart: always
        environment:
           - PGADMIN_DEFAULT_EMAIL=user@domain.com
           - PGADMIN_DEFAULT_PASSWORD=clientpass
        ports:
           - 5050:80
        networks:
            - test
# flyway container for magrating from existing database 
    flyway:
        image: flyway/flyway:7
        depends_on:
            - db
        volumes:
            - './app/flyway/conf:/flyway/conf'
            - './app/flyway/sql:/flyway/sql'
        command: -configFiles=/flyway/conf/flyway.conf migrate
        networks:
            - test
    app:
        build: ./app
        depends_on:
           - db
        volumes:
           - './app/data:/app/data'
           - './app/program_output:/app/program_output'
           - './app/flyway/sql:/app/flyway/sql'
        networks:
            - test
    result_app:
        build:
            context: ./result_app
            dockerfile: Dockerfile
        volumes:
            - '../app/program_output:/program_output'
        depends_on:
            - db
        

networks:
    test: